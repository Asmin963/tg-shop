from bot import bot
from tools.logger import log
from telebot import types
from telebot.types import InlineKeyboardMarkup as K, InlineKeyboardButton as B, ReplyKeyboardMarkup as RK, KeyboardButton as KB
from config import cfg
import lots_package
from Bot.Shop import keyboards


@bot.message_handler(commands=['add_lot'])
def add_lot_handler(m: types.Message):
    if m.chat.id not in cfg.ADMINS:
        log(f'{m.chat.id} –ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä')
        return
    cats = lots_package.products_json.get_categories()
    M = K(row_width=2)
    M.add(*[B(p['name'], None, f'func=add_lot_to_cat-cat={p["id"]}-from=add_lot_handler') for p in cats]).add(
        B("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", None,
          'from=add_lot_handler-func=new_category'))
    bot.send_message(m.chat.id, '*–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:*', parse_mode='Markdown', reply_markup=M)

    """

    –ù–∞–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    """


def new_category(call):
    M = types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'))
    bot.register_next_step_handler(
        (bot_msg := bot.send_message(call.message.chat.id, '‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:*',
                                     parse_mode='Markdown',
                                     reply_markup=M)), name_new_category, bot_msg)


def name_new_category(m, bot_msg):
    bot.delete_message(m.chat.id, m.message_id)
    bot.delete_message(m.chat.id, bot_msg.message_id)
    if m.content_type != 'text':
        bot.register_next_step_handler(
            (bot_msg := bot.send_message(m.chat.id, '*‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º*', parse_mode='Markdown')),
            name_new_category, bot_msg)
        return
    name_category = m.text.strip()
    if m.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
        bot.send_message(m.chat.id, "‚ùå *–û—Ç–º–µ–Ω–µ–Ω–æ*", reply_markup=keyboards.main_keyboard, parse_mode="Markdown")
        return
    if not name_category:
        bot.register_next_step_handler(
            (bot_msg := bot.send_message(m.chat.id, '*‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º*', parse_mode='Markdown')),
            new_category, bot_msg)
        return
    if name_category in lots_package.products_json.get_categories(argument="name"):
        bot.register_next_step_handler(
            (bot_msg := bot.send_message(m.chat.id, '*‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç*', parse_mode='Markdown')),
            new_category, bot_msg)
        return
    bot.register_next_step_handler(
        (bot_msg := bot.send_message(m.chat.id, '‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:*', parse_mode='Markdown')),
        desc_new_category,
        name_category, bot_msg)


def desc_new_category(m, name_category, bot_msg):
    if m.content_type != 'text':
        bot.register_next_step_handler(
            (bot_msg := bot.send_message(m.chat.id, '*‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º*', parse_mode='Markdown')),
            new_category, bot_msg)
        return
    desc_category = m.text.strip()
    bot.delete_message(m.chat.id, bot_msg.message_id)
    bot.delete_message(m.chat.id, m.message_id)
    if m.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
        bot.send_message(m.chat.id, "‚ùå *–û—Ç–º–µ–Ω–µ–Ω–æ*", reply_markup=keyboards.main_keyboard, parse_mode="Markdown")
        return
    if not desc_category:
        bot.register_next_step_handler((bot_msg := bot.send_message(
            m.chat.id, '*‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º*', parse_mode='Markdown')), desc_new_category,
                                       name_category, bot_msg)
        return
    if name_category in lots_package.products_json.get_categories(argument="description"):
        bot.register_next_step_handler(
            (bot_msg := bot.send_message(m.chat.id, '*‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç*',
                                         parse_mode='Markdown')), desc_new_category, name_category, bot_msg)
        return
    M = types.ReplyKeyboardMarkup(resize_keyboard=True)
    M.add(types.KeyboardButton('–ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'), types.KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'))
    bot.register_next_step_handler(
        (bot_msg := bot.send_message(m.chat.id, "üñº *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:*", parse_mode="Markdown",
                                     reply_markup=M)),
        image_new_category, name_category, desc_category, bot_msg)


def image_new_category(m, name_category, desc_category, bot_msg):
    bot.delete_message(m.chat.id, bot_msg.message_id)
    if m.content_type == 'text' and m.text == '–ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':
        bot.delete_message(m.chat.id, m.message_id)
        lots_package.products_json.add_category(name_category, desc_category)
        bot.send_message(m.chat.id, '‚úÖ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞*', parse_mode='Markdown',
                         reply_markup=keyboards.main_keyboard)
        return
    if m.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
        bot.send_message(m.chat.id, "‚ùå *–û—Ç–º–µ–Ω–µ–Ω–æ*", reply_markup=keyboards.main_keyboard, parse_mode="Markdown")
        return
    if m.content_type != 'photo':
        bot.delete_message(m.chat.id, m.message_id)
        bot.register_next_step_handler(
            (bot_msg := bot.send_message(m.chat.id, '*‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ jpg/png*',
                                         parse_mode="Markdown", reply_markup=RK(resize_keyboard=True).row(KB('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'), KB('–ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')))),
            image_new_category, name_category, desc_category, bot_msg)
        return
    image = m.photo[0].file_id
    bot.delete_message(m.chat.id, m.message_id)
    lots_package.products_json.add_category(name_category, desc_category, image=image)
    bot.send_message(m.chat.id, '‚úÖ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞*', parse_mode='Markdown',
                     reply_markup=keyboards.main_keyboard)


    """
    
    –ù–∞–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    
    """


def add_lot_to_cat(call, category_id: int):
    M = types.ReplyKeyboardMarkup(resize_keyboard=True)
    M.add(types.KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'))
    bot.register_next_step_handler(
        (bot_msg := bot.send_message(call.message.chat.id, '‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:*', parse_mode='Markdown',
                                     reply_markup=M)), name_new_product, category_id, bot_msg)


def name_new_product(m: types.Message, category_id: int, bot_msg):
    bot.delete_message(m.chat.id, bot_msg.message_id)
    bot.delete_message(m.chat.id, m.message_id)
    if m.content_type != 'text':
        bot.register_next_step_handler(
            (bot_msg := bot.send_message(m.chat.id, '*‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º*', parse_mode='Markdown')),
            name_new_product, bot_msg)
        return
    name_product = m.text.strip()
    if m.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
        bot.send_message(m.chat.id, "‚ùå *–û—Ç–º–µ–Ω–µ–Ω–æ*", reply_markup=keyboards.main_keyboard, parse_mode="Markdown")
        return
    if not name_product:
        bot.register_next_step_handler(
            (bot_msg := bot.send_message(m.chat.id, '*‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º*', parse_mode='Markdown')),
            name_new_product, category_id, bot_msg)
        return
    if name_product in lots_package.products_json.get_products(category_id, argument="name"):
        bot.register_next_step_handler(
            (bot_msg := bot.send_message(m.chat.id, '*‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç*',
                                         parse_mode='Markdown')),
            name_new_product, category_id, bot_msg)
        return
    bot.register_next_step_handler(
        (bot_msg := bot.send_message(m.chat.id, '‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:*', parse_mode='Markdown',
                                     reply_markup=keyboards.cancel_keyboard)),
        desc_new_product,
        category_id, name_product, bot_msg)


def desc_new_product(m: types.Message, category_id: int, name_product: str, bot_msg):
    bot.delete_message(m.chat.id, bot_msg.message_id)
    bot.delete_message(m.chat.id, m.message_id)
    if m.content_type != 'text':
        bot.register_next_step_handler(
            (bot_msg := bot.send_message(m.chat.id, '*‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º*', parse_mode='Markdown')),
            desc_new_product, bot_msg)
        return
    desc_product = m.text.strip()
    if m.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
        bot.send_message(m.chat.id, "‚ùå *–û—Ç–º–µ–Ω–µ–Ω–æ*", reply_markup=keyboards.main_keyboard, parse_mode="Markdown")
        return
    if not desc_product:
        bot.register_next_step_handler(
            (bot_msg := bot.send_message(m.chat.id, '*‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º*', parse_mode='Markdown')),
            desc_new_product, category_id,
            name_product, bot_msg)
        return
    if name_product in lots_package.products_json.get_products(category_id, argument="description"):
        bot.register_next_step_handler(
            (bot_msg := bot.send_message(m.chat.id, '*‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç*',
                                         parse_mode='Markdown', reply_markup=RK(resize_keyboard=True).row(KB('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'), KB('–ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')))),
            desc_new_product, category_id, name_product, bot_msg)
        return
    M = types.ReplyKeyboardMarkup(resize_keyboard=True)
    M.add(types.KeyboardButton('–ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'), types.KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'))
    bot.register_next_step_handler(
        (bot_msg := bot.send_message(m.chat.id, "üñº *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞*", parse_mode="Markdown",
                                     reply_markup=M)),
        image_new_product, category_id, name_product, desc_product, bot_msg)


def image_new_product(m, category_id, name, desc, bot_msg):
    bot.delete_message(m.chat.id, bot_msg.message_id)
    bot.delete_message(m.chat.id, m.message_id)
    M = types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'))
    if m.content_type == 'text':
        if m.text == '–ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':
            bot.register_next_step_handler(
                (bot_msg := bot.send_message(m.chat.id, f'üí∂ *–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –Ω–∞ —Ç–æ–≤–∞—Ä:*', parse_mode='Markdown',
                                             reply_markup=M)),
                price_new_product,
                category_id, name, desc, bot_msg)
            return
        if m.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
            bot.send_message(m.chat.id, "‚ùå *–û—Ç–º–µ–Ω–µ–Ω–æ*", reply_markup=keyboards.main_keyboard,
                             parse_mode="Markdown")
            return
    if m.content_type != 'photo':
        bot.register_next_step_handler(
            (bot_msg := bot.send_message(m.chat.id, '*‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ jpg/png*',
                                         parse_mode="Markdown", reply_markup=RK(resize_keyboard=True).row(KB('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'), KB('–ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')))),
            image_new_product, category_id, name, desc, bot_msg)
        return
    image = m.photo[0].file_id
    M = types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'))
    bot.register_next_step_handler(
        (bot_msg := bot.send_message(m.chat.id, f'üí∂ *–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –Ω–∞ —Ç–æ–≤–∞—Ä:*', parse_mode='Markdown', reply_markup=M)),
        price_new_product,
        category_id, name, desc, bot_msg, image=image)


def price_new_product(m, category_id, name, desc, bot_msg, image=None):
    bot.delete_message(m.chat.id, bot_msg.message_id)
    bot.delete_message(m.chat.id, m.message_id)
    if m.content_type != 'text':
        bot.register_next_step_handler(
            (bot_msg := bot.send_message(m.chat.id, '*‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π*', parse_mode='Markdown')),
            price_new_product,
            category_id, name, desc, bot_msg, image=image)
        return
    price = m.text
    try:
        if float(price) < 0:
            bot.register_next_step_handler(
                (bot_msg := bot.send_message(m.chat.id, '*‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π*', parse_mode='Markdown')),
                price_new_product,
                category_id, name, desc, bot_msg, image=image)
            return
    except Exception as e:
        log(str(e), lvl=2)
        bot.register_next_step_handler(
            (bot_msg := bot.send_message(m.chat.id, '*‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º*', parse_mode='Markdown')),
            price_new_product,
            category_id, name, desc, bot_msg, image=image)
        return

    if not m.text:
        bot.register_next_step_handler(
            (bot_msg := bot.send_message(m.chat.id, '*‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π*', parse_mode='Markdown')),
            price_new_product,
            category_id, name, desc, bot_msg, image=image)
        return
    price = float(price)
    add_prod = lots_package.products_json.add_product(category_id, name, desc, price, image=image)
    if not add_prod:
        bot.send_message(m.chat.id, f'*‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä*', parse_mode='Markdown',
                         reply_markup=keyboards.main_keyboard)
        return
    bot.send_message(m.chat.id, f'‚úÖ *–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω*', parse_mode='Markdown',
                     reply_markup=keyboards.main_keyboard)
