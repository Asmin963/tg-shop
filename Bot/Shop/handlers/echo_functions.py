import os

from bot import bot
from tools.logger import log
from config import cfg
from Bot.Shop import keyboards
from lots_package import products_json, favorite_products
from telebot.types import InlineKeyboardMarkup as K, InlineKeyboardButton as B

from Bot.Payment import OrdersBotHandler, JSON_Orders
from .users import basefunc

from lots_package import delivery_products


class EchoFunctions:
    def __init__(self):
        self.cancel_text = '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'

    def open_category(self, call, category_id=None, from_arg=None):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ï—Å–ª–∏ –µ—Å—Ç—å category_id, —Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –∞–π–¥–∏ category_id, –∏–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        –ï—Å–ª–∏ from_arg == 'favorite_lot', —Ç–æ —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ –∏–∑ –º–µ–Ω—é –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ

        :param call:
        :param category_id:
        :param from_arg:
        :return:
        """
        user_id = call.message.chat.id
        bot.delete_message(user_id, call.message.message_id)
        try:
            if from_arg is not None and from_arg == 'favorite_lot':
                bot.send_message(user_id, f'*–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:*', parse_mode='Markdown',
                                 reply_markup=keyboards.keyboard_favorite_products(user_id))
                return True
            if not category_id:
                bot.send_message(chat_id=user_id, text='*–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:*', parse_mode='Markdown',
                                 reply_markup=keyboards.categories_all())
            else:
                basefunc.send_category(user_id, category_id)
            return True
        except Exception as e:
            log(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}', lvl=2)
            return False

    def open_product(self, call, category_id, product_id, from_arg=None):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ç–æ–≤–∞—Ä–∞
        –ï—Å–ª–∏ from_arg == 'favorite_lot', —Ç–æ —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ —Ç–æ–≤–∞—Ä –±—ã–ª –æ—Ç–∫—Ä—ã—Ç –∏–∑ –º–µ–Ω—é –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ

        :param call:
        :param category_id:
        :param product_id:
        :param from_arg:
        :return:
        """
        user_id = call.message.chat.id
        try:
            product = products_json.get_product(str(category_id), "id", str(product_id))
            if from_arg is not None and from_arg == 'favorite_menu':
                markup = keyboards.keyboard_favorite_product(category_id, product_id)
            else:
                markup = keyboards.product_keyboard(user_id, product_id, category_id)
            bot.delete_message(call.message.chat.id, call.message.message_id)
            if not product['image']:
                bot.send_message(chat_id=user_id, text=f'üìÉ *–¢–æ–≤–∞—Ä:* {product["name"]}\n*üí∞ –¶–µ–Ω–∞:* '
                                                       f'{product["price"]} ‚ÇΩ\n*üìÉ –û–ø–∏—Å–∞–Ω–∏–µ:* {product["description"]}\nüì¶ –í –Ω–∞–ª–∏—á–∏–∏: {product["count"]}',
                                 parse_mode='Markdown', reply_markup=markup)
            else:
                bot.send_photo(user_id, product['image'],
                               caption=f'üìÉ *–¢–æ–≤–∞—Ä:* {product["name"]}\n*üí∞ –¶–µ–Ω–∞:* '
                                       f'{product["price"]} ‚ÇΩ\n*üìÉ –û–ø–∏—Å–∞–Ω–∏–µ:* {product["description"]}\nüì¶ *–í –Ω–∞–ª–∏—á–∏–∏:* {product["count"]}',
                               parse_mode='Markdown', reply_markup=markup)
        except Exception as e:
            log(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ: {e}', lvl=2)
            return False

    def favorite_product(self, call, category_id, product_id, from_arg=None):
        """
        –í—ã–≤–æ–¥–∏—Ç —Ç–æ–≤–∞—Ä –∏–∑ –º–µ–Ω—é –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ

        :param call:
        :param category_id:
        :param product_id:
        :param from_arg:
        :return:
        """
        user_id = call.message.chat.id
        try:
            if "delete_favorite" in call.data:
                favorite_products.delete_favorite_product(user_id, category_id, product_id)
                if 'from' in call.data and from_arg == 'favorite_menu':
                    bot.delete_message(call.message.chat.id, call.message.message_id)
                    bot.send_message(user_id, f'*‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ! *', parse_mode='Markdown')
                    return
            product_id = product_id
            product = products_json.get_product(category_id, "id", product_id)
            markup_buy = K(row_width=5).add(
                *[B(text=i, callback_data=f'buy-lots_package={product_id}-count={i}') for i in
                  range(1, 11)]
            ).add(
                B(text='–ù–∞–∑–∞–¥', callback_data=f'from=favorite_product-to=favorite')
            ).add(B(text='üóë –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ',
                    callback_data=f'delete_favorite-cat={category_id}-prod={product_id}-from=favorite'))
            markup_buy.add(
                B('‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', None,
                  f'func=delete_prod-cat={category_id}-prod={product_id}-from=prod_menu'))
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(chat_id=user_id, text=f'üìÉ *–¢–æ–≤–∞—Ä:* {product["name"]}\n*üí∞ –¶–µ–Ω–∞:* '
                                                   f'{product["price"]} ‚ÇΩ\n*üìÉ –û–ø–∏—Å–∞–Ω–∏–µ:* {product["description"]}',
                             parse_mode='Markdown', reply_markup=markup_buy)
            return
        except KeyError as e:
            log(f'eyError: {e}', lvl=2)
        except Exception as e:
            log(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ: {e}', lvl=2)

    def delete_prod(self, call, category, product, from_arg=None):
        """
        –£–¥–∞–ª—è–µ—Ç –ª–æ—Ç

        :param call:
        :param category:
        :param product:
        :param from_arg:
        :return:
        """
        user_id = call.message.chat.id
        bot.send_message(user_id, f'‚ö†Ô∏è*–£–¥–∞–ª–∏—Ç—å –ª–æ—Ç?*', parse_mode="Markdown",
                         reply_markup=K().row(
                             B('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', None, f'func=accept_delete_lot-cat={category}-prod={product}'),
                             B('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', None, f'func=cancel_delete_lot')
                         ))

    def accept_delete_lot(self, call, category, product):
        user_id = call.message.chat.id
        bot.delete_message(call.message.chat.id, call.message.message_id)
        products_json.delete_product(category, product)
        bot.send_message(user_id, f'‚úÖ *–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!*', parse_mode="Markdown")

    def cancel_delete_lot(self, call):
        bot.delete_message(call.message.chat.id, call.message.message_id)

    def add_favorite(self, call, category_id, product_id):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ª–æ—Ç –≤ —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ

        :param call:
        :param category_id:
        :param product_id:
        :return:
        """
        try:
            product_id = product_id
            user_id = call.message.chat.id
            add = favorite_products.save_favorite_product(user_id=user_id, category=category_id, product_id=product_id)

            if isinstance(add, str):
                bot.send_message(user_id, add, parse_mode='Markdown')
                return False

            if add:
                markup = keyboards.product_keyboard(user_id, product_id, category_id)
                bot.edit_message_reply_markup(message_id=call.message.message_id, chat_id=user_id,
                                              reply_markup=markup)
            else:
                bot.send_message(user_id, f'*‚ùå –¢–æ–≤–∞—Ä* `{product_id}` *–Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!*',
                                 parse_mode='Markdown')
                return False
        except Exception as e:
            log(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}', lvl=2)
            return False

    def delete_favorite(self, call, category_id, product_id, from_arg=None):
        """
        –£–¥–∞–ª—è–µ—Ç –ª–æ—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ

        :param call:
        :param category_id:
        :param product_id:
        :param from_arg:
        :return:
        """
        user_id = call.message.chat.id
        favorite_products.delete_favorite_product(user_id, category_id, product_id)
        if from_arg is not None and from_arg == 'favorite_menu':
            bot.delete_message(user_id, call.message.message_id)
            bot.send_message(user_id, f'*‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ! *', parse_mode='Markdown')
        else:
            markup = keyboards.product_keyboard(user_id, product_id=product_id, category_id=category_id)
            bot.edit_message_reply_markup(message_id=call.message.message_id, chat_id=user_id, reply_markup=markup)
        return

    def favorite(self, call):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –ª–æ—Ç–æ–≤ –∏–∑ –º–µ–Ω—é –∏–∑–æ–±—Ä–∞–Ω–Ω–æ–≥–æ

        :param call:
        :return:
        """
        user_id = call.message.chat.id
        try:
            favorites = favorite_products.get_favorite_products(user_id)
            favorite_products_keyboard = K(row_width=1).add(
                *[B(text=product["name"],
                    callback_data=f'func=favorite-prod={product["product_id"]}-cat={product["cat"]}')
                  for product in
                  favorites]
            ).add(
                B(text='üîô –°–∫—Ä—ã—Ç—å', callback_data='hide_keyboard')
            )
            bot.delete_message(user_id, call.message.message_id)
            bot.send_message(user_id, '*–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:*', parse_mode='Markdown',
                             reply_markup=favorite_products_keyboard)
        except Exception as e:
            log(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {e}', lvl=2)
            return False

    def categories_menu(self, call, from_arg=None):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π

        :param call:
        :param from_arg:
        :return:
        """
        user_id = call.message.chat.id
        try:
            bot.delete_message(user_id, call.message.message_id)
            categories = keyboards.categories_all(for_user=True if user_id not in cfg.ADMINS else False)
            if not categories:
                bot.send_message(user_id, '*üõí –¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç*', parse_mode='Markdown')
                return
            bot.send_message(user_id, '*–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:*', parse_mode='Markdown',
                             reply_markup=categories)
        except Exception as e:
            log(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}', lvl=2)
            return False

    def favorite_lot(self, call, category_id, product_id, from_arg=None):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ª–æ—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ

        :param call:
        :param category_id:
        :param product_id:
        :param from_arg:
        :return:
        """
        user_id = call.message.chat.id
        try:
            product = products_json.get_product(category_id, "id", product_id)
            if not product:
                log(f'–¢–æ–≤–∞—Ä —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º {product_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', lvl=2)
                favorite_products.delete_favorite_product(user_id, category_id, product_id)
                bot.delete_message(user_id, call.message.message_id)
                bot.send_message(user_id, f'‚ùå *–¢–æ–≤–∞—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ–Ω –±—ã–ª —É–¥–∞–ª—ë–Ω.*', parse_mode='Markdown')
                return
            if from_arg is not None and from_arg == 'favorite_menu':
                markup = keyboards.keyboard_favorite_product(category_id, product_id)
            else:
                markup = keyboards.product_keyboard(user_id, product_id, category_id)
            bot.delete_message(call.message.chat.id, call.message.message_id)
            if not product['image']:
                bot.send_message(chat_id=user_id, text=f'üìÉ *–¢–æ–≤–∞—Ä:* {product["name"]}\n*üí∞ –¶–µ–Ω–∞:* '
                                                       f'{product["price"]} ‚ÇΩ\n*üìÉ –û–ø–∏—Å–∞–Ω–∏–µ:* {product["description"]}\nüì¶ –í –Ω–∞–ª–∏—á–∏–∏: {product["count"]}',
                                 parse_mode='Markdown', reply_markup=markup)
            else:
                bot.send_photo(call.message.chat.id, product['image'],
                               caption=f'üìÉ *–¢–æ–≤–∞—Ä:* {product["name"]}\n*üí∞ –¶–µ–Ω–∞:* '
                                       f'{product["price"]} ‚ÇΩ\n*üìÉ –û–ø–∏—Å–∞–Ω–∏–µ:* {product["description"]}\nüì¶ –í –Ω–∞–ª–∏—á–∏–∏: {product["count"]}',
                               parse_mode='Markdown', reply_markup=markup)
        except Exception as e:
            log(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ: {e}', lvl=2)
            return False

    def delete_category(self, call, category, from_arg=None):
        """
        –£–¥–∞–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é

        :param call:
        :param category:
        :param from_arg:
        :return:
        """
        chat_id = call.message.chat.id
        if not products_json.get_category(category_id=category):
            bot.delete_message(chat_id, call.message.message_id)
            bot.send_message(chat_id, f'*‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç*', parse_mode='Markdown')
            return
        M = K().row(B('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', None, f'func=accept_delete_category-cat={category}'),
                    (B('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', None, f'func=cancel_delete_category')))
        bot.send_message(chat_id, f'*–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é?*', parse_mode='Markdown', reply_markup=M)

    def cancel_delete_category(self, call):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        return

    def accept_delete_category(self, call, category):
        chat_id = call.message.chat.id
        del_cat = products_json.del_category(category=category)
        if not del_cat:
            bot.send_message(chat_id, f'*‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*', parse_mode='Markdown')
        else:
            bot.delete_message(chat_id, call.message.message_id)
            bot.send_message(chat_id, f"* üóë –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞*", parse_mode='Markdown')

    def upload_products(self, call, category, product_id, bot_msg=None):
        chat_id = call.message.chat.id
        bot.register_next_step_handler(bot_msg := (bot.send_message(chat_id,
                                                                    f'*üìÅ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–æ–≤–∞—Ä—ã, –ø–æ 1 –Ω–∞ –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É. \n–õ–∏–±–æ txt —Ñ–∞–π–ª*',
                                                                    parse_mode='Markdown',
                                                                    reply_markup=keyboards.cancel_keyboard)),
                                       self.upload_products_handler, category, product_id, bot_msg)

    def upload_products_handler(self, m, category, product_id, bot_msg):
        """
        –í—ã–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤ —Ç–æ–≤–∞—Ä–Ω—ã–π —Ñ–∞–π–ª

        :param m:
        :param category:
        :param product_id:
        :param bot_msg:
        :return:
        """
        if m.text == self.cancel_text:
            bot.delete_message(m.chat.id, m.message_id)
            bot.delete_message(m.chat.id, bot_msg.message_id)
            bot.send_message(m.chat.id, "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", parse_mode='Markdown', reply_markup=keyboards.main_keyboard)
            return
        chat_id = m.chat.id
        if m.document:
            try:
                chat_id = m.chat.id
                if not m.document.mime_type.startswith('text/'):
                    if bot_msg:
                        bot.delete_message(chat_id, bot_msg.message_id)
                    bot.register_next_step_handler(
                        (bot_msg := bot.send_message(chat_id, "üìå *–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª*.", parse_mode='Markdown',
                                                     reply_markup=keyboards.cancel_keyboard)),
                        self.upload_products_handler, category, product_id, bot_msg)
                file_path = bot.get_file(m.document.file_id).file_path
                downloaded_file = bot.download_file(file_path)
                with open((save_path := os.path.join(cfg.PRODUCT_PATH, f"{category}_temp.file")), 'wb') as new_file:
                    new_file.write(downloaded_file)
                with open(save_path, 'r') as f:
                    lines = list(map(str.strip, f.readlines()))
                os.remove(save_path)
            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                return False
        else:
            lines = list(map(str.strip, m.text.split("\n")))
        upload = delivery_products.add_products(category, product_id, lines, absolut_add=True)
        if not upload:
            bot.send_message(chat_id, f'*‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤*', parse_mode='Markdown')
            return False
        bot.send_message(chat_id, f'‚úÖ *–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ* `{len(lines)}` *—Ç–æ–≤–∞—Ä–æ–≤*', parse_mode='Markdown')
        basefunc.send_product(chat_id, category, product_id)

    def buy(self, call, category, product, count: int):
        user_id = call.message.chat.id
        lot = products_json.get_product(str(category), "id", str(product))
        if int(lot['count']) < int(count):
            bot.send_message(chat_id=user_id, text=f'*‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏*', parse_mode='Markdown')
            return False
        OrdersBotHandler.create_(user_id, category, product, int(count))

    def check_status_order(self, call, order):
        user_id = call.message.chat.id
        status = OrdersBotHandler.check_status_payment(order)
        if not status:
            bot.send_message(chat_id=user_id, text=f'*‚åõÔ∏è –ó–∞–∫–∞–∑ –Ω–µ –æ–ø–ª–∞—á–µ–Ω*',
                             parse_mode='Markdown')
            return False
        msg_id = call.message.message_id
        OrdersBotHandler.payed_order(user_id, order, msg_id)
        return True

    def cancel_order(self, call, order_id):
        try:
            chat_id = call.message.chat.id
            if JSON_Orders._status(chat_id, order_id):
                bot.send_message(chat_id, f'üòé *–ó–∞–∫–∞–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω!*', parse_mode='Markdown')
                bot.edit_message_reply_markup(chat_id, message_id=call.message.message_id,
                                              reply_markup=K().add(B('‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω', None, 'decorate')))
                return False
            del_order = JSON_Orders.delete_order_(str(chat_id), order_id)
            if not del_order:
                bot.send_message(chat_id, f'*‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞*', parse_mode='Markdown')
                return False
            bot.edit_message_reply_markup(chat_id, message_id=call.message.message_id, reply_markup=K().add(B('‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω', None, 'decorate')))
        except Exception as e:
            log(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞: {e}', lvl=2)
            return False

    def history_orders(self, call, count):
        user_id = call.message.chat.id
        orders = JSON_Orders._last_orders(str(user_id), int(count))
        if not orders:
            bot.send_message(chat_id=user_id, text=f'*‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤*', parse_mode='Markdown')
            return False
        msg = ""
        for order in orders:
            msg += f"üîë *–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: *{order['name']}\n"
            msg += f"üÜî *–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: *{order['order_id']}\n"
            msg += f"üìÖ *–î–∞—Ç–∞: *{order['time']}\n"
            msg += f"üí∂ *–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: *{order['amount']} ‚ÇΩ\n\n"
        bot.send_message(chat_id=user_id, text=f'*üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:*\n\n{msg}', parse_mode='Markdown', reply_markup=keyboards.hide_keyboard)




